ENTITY relogioDespertador IS
	PORT(teclado : IN BIT_VECTOR(9 DOWNTO 0);
		  selecao : IN BIT_VECTOR(1 DOWNTO 0);
		  A, B, C, D, E, F, G : OUT BIT);
END relogioDespertador;		  
-------------------------------------------------------------------------------------------------------------------------------------------------
ARCHITECTURE structural OF relogioDespertador IS
	COMPONENT codificador IS
		PORT(t: IN BIT_VECOTR(9 DOWNTO 0); --TECLAS DE 0 A 9
		     s: OUT BIT_VECTOR(3 DOWNTO 0)); --TECLAS DE SELEÇAO
	END COMPONENT;
	
	COMPONENT demux1x4 IS
		PORT(a : IN BIT_VECTOR(3 DOWNTO 0); --ENTRADA DO DEMUX
			  sel : IN BIT_VECTOR(1 DOWNTO 0); --SELEÇAO: 00 - DISPLAY 1; 01 - DISPLAY 2; 10 - DISPLAY 3; 11 - DISPLAY 4
			  s1, s2, s3, s4 : OUT BIT_VECTOR(3 DOWNTO 0));
	END COMPONENT;
	
	COMPONENT decodificador IS
		PORT(s : IN BIT_VECTOR(3 DOWNTO 0); --PALAVRA BINARIA PARA DETERMINAR O COMPORTAMENTO DOS 7 SEGMENTOS
			  a, b, c, d, e, f, g : OUT BIT); --CADA UM DOS 7 SEGMENTOS
	END COMPONENT;
	
	SIGNAL codTeclado, display1, display2, display3, display4 : BIT_VECTOR(3 DOWNTO 0);
	
	BEGIN
		cod: codificador PORT MAP(teclado, codTeclado);
		dmx: demux1x4 PORT MAP(codTeclado, selecao, display1, display2, display3, display4);
		dp1: decodificador PORT MAP(display1, A, B, C, D, E, F, G);
		dp2: decodificador PORT MAP(display2, A, B, C, D, E, F, G);
		dp3: decodificador PORT MAP(display3, A, B, C, D, E, F, G);
		dp4: decodificador PORT MAP(display4, A, B, C, D, E, F, G);
		
END structural;